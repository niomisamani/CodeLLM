# 1. Function to add two user-provided numbers and return the sum.
def add_numbers(a, b):
    return a + b

# 2. Find and print the largest among three numbers.
def largest_of_three(a, b, c):
    return max(a, b, c)

# 3. Find and print the smallest among three numbers.
def smallest_of_three(a, b, c):
    return min(a, b, c)

# 4. Merge two given lists into one.
def merge_lists(list1, list2):
    return list1 + list2

# 5. Check whether a number is prime or not.
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# 6. Print the factors of a given number.
def factors(n):
    return [i for i in range(1, n + 1) if n % i == 0]

# 7. Find the factorial of a number.
def factorial(n):
    return 1 if n == 0 else n * factorial(n - 1)

# 8. Determine whether a number is negative, positive, or zero.
def check_sign(n):
    if n > 0:
        return 'Positive'
    elif n < 0:
        return 'Negative'
    else:
        return 'Zero'

# 9. Print the multiplication table of a given number.
def multiplication_table(n):
    return [n * i for i in range(1, 11)]

# 10. Print powers of 2 for a given number of terms.
def powers_of_two(n):
    return [2 ** i for i in range(n)]

# 11. Filter numbers in a list divisible by a given number.
def divisible_by(lst, num):
    return [x for x in lst if x % num == 0]

# 12. Return the sum of N natural numbers.
def sum_natural_numbers(n):
    return n * (n + 1) // 2

# 13. Swap the first and last elements in a list.
def swap_first_last(lst):
    if len(lst) > 1:
        lst[0], lst[-1] = lst[-1], lst[0]
    return lst

# 14. Find the area of a circle given the radius.
import math
def area_of_circle(radius):
    return math.pi * radius * radius

# 15. Print the sum of squares of the first N natural numbers.
def sum_of_squares(n):
    return sum(i ** 2 for i in range(1, n + 1))

# 16. Print the length of a list.
def list_length(lst):
    return len(lst)

# 17. Print the length of a given tuple.
def tuple_length(tpl):
    return len(tpl)

# 18. Print elements of a list, one element per line.
def print_elements(lst):
    for elem in lst:
        print(elem)

# 19. Remove all odd numbers from a list.
def remove_odds(lst):
    return [x for x in lst if x % 2 == 0]

# 20. Remove all even numbers from a list.
def remove_evens(lst):
    return [x for x in lst if x % 2 != 0]

# 21. Find LCM of two numbers.
import math
def lcm(a, b):
    return abs(a * b) // math.gcd(a, b)

# 22. Check whether a number is a palindrome.
def is_palindrome(n):
    return str(n) == str(n)[::-1]

# 23. Function to add and multiply using lambda functions.
add = lambda x, y: x + y
multiply = lambda x, y: x * y

# 24. Convert lowercase string to uppercase.
def to_uppercase(s):
    return s.upper()

# 25. Check if a given number is odd or even.
def is_even(n):
    return n % 2 == 0

# 26. Extract and print digits in reverse order.
def reverse_digits(n):
    return int(str(n)[::-1])

# 27. Calculate the volume of a cylinder.
def cylinder_volume(radius, height):
    return math.pi * radius ** 2 * height

# 28. Calculate BMI and provide comments.
def calculate_bmi(weight, height):
    bmi = weight / (height ** 2)
    if bmi < 18.5:
        return 'Underweight'
    elif 18.5 <= bmi < 24.9:
        return 'Normal weight'
    elif 25 <= bmi < 29.9:
        return 'Overweight'
    else:
        return 'Obese'

# 29. Explain the zip function in Python.
def explain_zip():
    return 'The zip function in Python is used to combine two or more iterables into a single iterator of tuples.'

# 30. Add two lists using Python's zip method.
def add_lists_zip(list1, list2):
    return [a + b for a, b in zip(list1, list2)]

# 31. Function to calculate the kinetic energy of an object.
def kinetic_energy(mass, velocity):
    return 0.5 * mass * velocity ** 2

# 32. Function to find the area of a right-angle triangle.
def area_of_right_triangle(base, height):
    return 0.5 * base * height

# 33. Find the area of a triangle using Heron's formula.
def area_heron(a, b, c):
    s = (a + b + c) / 2
    return (s * (s - a) * (s - b) * (s - c)) ** 0.5

# 34. Function to calculate speed, distance, and time.
def calculate_speed(distance, time):
    return distance / time

# 35. Function to merge two dictionaries.
def merge_dictionaries(dict1, dict2):
    return {**dict1, **dict2}

# 36. Function to find the GCD of two numbers.
import math
def gcd(a, b):
    return math.gcd(a, b)

# 37. Function to calculate power using recursion.
def power_recursive(base, exponent):
    if exponent == 0:
        return 1
    return base * power_recursive(base, exponent - 1)

# 38. Function to remove duplicate items from a list.
def remove_duplicates(lst):
    return list(set(lst))

# 39. Write a decorator function to track the time taken by a function.
import time
def timer_decorator(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        print(f'Time taken: {end_time - start_time} seconds')
        return result
    return wrapper

# 40. Function to calculate gravitational force.
def gravitational_force(m1, m2, distance):
    G = 6.67430e-11
    return G * m1 * m2 / distance ** 2

# 41. Implementing Pigeonhole Sort.
def pigeonhole_sort(arr):
    min_val, max_val = min(arr), max(arr)
    size = max_val - min_val + 1
    holes = [[] for _ in range(size)]
    for x in arr:
        holes[x - min_val].append(x)
    return [x for hole in holes for x in hole]

# 42. Convert time from 12-hour to 24-hour format.
def convert_to_24hr(time_str):
    from datetime import datetime
    return datetime.strptime(time_str, '%I:%M %p').strftime('%H:%M')

# 43. Implement a generator function to generate Fibonacci numbers.
def fibonacci_generator():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

# 44. Function to remove punctuation from a string.
import string
def remove_punctuation(text):
    return text.translate(str.maketrans('', '', string.punctuation))

# 45. Explain lambda function usage.
def explain_lambda():
    return 'Lambda functions in Python are small anonymous functions that are defined with the lambda keyword.'

# 46. Implementing Gnome Sort.
def gnome_sort(arr):
    i = 0
    while i < len(arr):
        if i == 0 or arr[i] >= arr[i - 1]:
            i += 1
        else:
            arr[i], arr[i - 1] = arr[i - 1], arr[i]
            i -= 1
    return arr

# 47. Implementing Stooge Sort.
def stooge_sort(arr, l=0, h=None):
    if h is None:
        h = len(arr) - 1
    if arr[l] > arr[h]:
        arr[l], arr[h] = arr[h], arr[l]
    if h - l + 1 > 2:
        t = (h - l + 1) // 3
        stooge_sort(arr, l, h - t)
        stooge_sort(arr, l + t, h)
        stooge_sort(arr, l, h - t)
    return arr

# 48. Count the number of times a function is called.
def count_calls(func):
    def wrapper(*args, **kwargs):
        wrapper.calls += 1
        return func(*args, **kwargs)
    wrapper.calls = 0
    return wrapper

# 49. Calculate the moment of inertia of a ring or sphere.
def moment_of_inertia(mass, radius, shape='ring'):
    if shape == 'ring':
        return mass * radius ** 2
    elif shape == 'sphere':
        return (2/5) * mass * radius ** 2
    else:
        raise ValueError('Shape not supported')

# 50. Print a list in reverse order.
def print_reverse(lst):
    for elem in reversed(lst):
        print(elem)

# 51. Explain global and local scope.
def explain_scope():
    return 'Global scope is accessible throughout the code, while local scope is restricted to the function where it is defined.'

# 52. Use map to square a list of numbers.
def square_list(lst):
    return list(map(lambda x: x**2, lst))

# 53. Function to calculate angular velocity.
def angular_velocity(radius, linear_velocity):
    return linear_velocity / radius

# 54. Function to find the area of a sphere or hemisphere.
def area_of_sphere(radius, is_hemisphere=False):
    if is_hemisphere:
        return 2 * math.pi * radius ** 2
    return 4 * math.pi * radius ** 2

# 55. Function to find roots of a quadratic equation.
def quadratic_roots(a, b, c):
    discriminant = b ** 2 - 4 * a * c
    if discriminant >= 0:
        root1 = (-b + discriminant ** 0.5) / (2 * a)
        root2 = (-b - discriminant ** 0.5) / (2 * a)
        return root1, root2
    return 'Complex roots'

# 56. Function to calculate the electrostatic force between two charges.
def electrostatic_force(q1, q2, distance):
    k = 8.9875e9
    return k * q1 * q2 / distance ** 2

# 57. Function to calculate and return compound interest.
def compound_interest(principal, rate, time, n=1):
    return principal * (1 + rate / (100 * n)) ** (n * time)

# 58. Convert temperature from Celsius to Fahrenheit.
def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32

# 59. Calculate the area and perimeter of basic geometric shapes.
def area_and_perimeter(shape, *args):
    if shape == 'rectangle':
        length, width = args
        return length * width, 2 * (length + width)
    elif shape == 'circle':
        radius = args[0]
        return math.pi * radius ** 2, 2 * math.pi * radius

# 60. Explain the use of Pythonâ€™s assert.
def explain_assert():
    return 'Assert is used for debugging purposes to test if a condition is true.'

# 61. Function to convert list elements to uppercase.
def to_uppercase_list(lst):
    return [x.upper() for x in lst]

# 62. Function to print unique elements in a list.
def unique_elements(lst):
    return list(set(lst))

# 63. Function to print ASCII values of characters.
def ascii_values(s):
    return {char: ord(char) for char in s}

# 64. Filter list elements using a substring.
def filter_by_substring(lst, substring):
    return [s for s in lst if substring in s]

# 65. Recursive function to print Fibonacci numbers.
def fibonacci_recursive(n):
    if n <= 1:
        return n
    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)

# 66. Function to return the cartesian distance between two points.
def cartesian_distance(x1, y1, x2, y2):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

# 67. Calculate pressure, volume, and temperature using the ideal gas equation.
def ideal_gas_law(P=None, V=None, n=None, T=None, R=0.0821):
    if P is None:
        return (n * R * T) / V
    if V is None:
        return (n * R * T) / P
    if n is None:
        return (P * V) / (R * T)
    if T is None:
        return (P * V) / (n * R)

# 68. Function to return the sum of first n natural numbers.
def sum_natural(n):
    return n * (n + 1) // 2

# 69. Function to print even numbers from a list using list comprehension.
def filter_even(lst):
    return [x for x in lst if x % 2 == 0]

# 70. Function to print odd numbers from a list using list comprehension.
def filter_odd(lst):
    return [x for x in lst if x % 2 != 0]

# 71. Use list comprehension to create a new list with numbers greater than a given number.
def greater_than(lst, num):
    return [x for x in lst if x > num]

# 72. Function to find the product of a list.
import math
def product_of_list(lst):
    return math.prod(lst)

# 73. Function to calculate factorial using recursion.
def factorial_recursive(n):
    return 1 if n == 0 else n * factorial_recursive(n - 1)

# 74. Function to count vowels in a string.
def count_vowels(s):
    return sum(1 for char in s.lower() if char in 'aeiou')

# 75. Function to find the number of occurrences of a character in a string.
def char_occurrences(s, char):
    return s.count(char)

# 76. Implementing selection sort.
def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
    return arr

# 77. Function to remove all vowels from a given string.
def remove_vowels(s):
    return ''.join(char for char in s if char.lower() not in 'aeiou')

# 78. Implementing bubble sort.
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

# 79. Implementing insertion sort.
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

# 80. Function to reverse a string using slicing.
def reverse_string_slicing(s):
    return s[::-1]

# 81. Function to reverse a string using a loop.
def reverse_string_loop(s):
    reversed_str = ''
    for char in s:
        reversed_str = char + reversed_str
    return reversed_str

# 82. Function to check whether a word is a palindrome or not.
def is_palindrome_word(word):
    return word == word[::-1]

# 83. Function to calculate simple interest.
def simple_interest(principal, rate, time):
    return (principal * rate * time) / 100

# 84. Function to remove whitespace from a string.
def remove_whitespace(s):
    return ''.join(s.split())

# 85. Count the number of words in a string.
def word_count(s):
    return len(s.split())

# 86. Implementing quicksort.
def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

# 87. Function to sort a dictionary by values.
def sort_dict_by_values(d):
    return dict(sorted(d.items(), key=lambda item: item[1]))

# 88. Calculate the sum of squares of first n odd numbers.
def sum_squares_of_odds(n):
    return sum(i ** 2 for i in range(1, 2 * n, 2))

# 89. Find common elements between two lists.
def common_elements(list1, list2):
    return list(set(list1) & set(list2))

# 90. Find unique elements in both given lists.
def unique_elements_both_lists(list1, list2):
    return list(set(list1) ^ set(list2))

# 91. Check if two strings are anagrams.
def are_anagrams(str1, str2):
    return sorted(str1) == sorted(str2)

# 92. Implementing merge sort.
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

    return arr

# 93. Remove duplicates from a sorted list.
def remove_duplicates_sorted(lst):
    return list(dict.fromkeys(lst))

# 94. Implementing heapsort.
import heapq
def heapsort(arr):
    heapq.heapify(arr)
    return [heapq.heappop(arr) for _ in range(len(arr))]

# 95. Function to capitalize the first letter of each word in a string.
def capitalize_words(s):
    return s.title()

# 96. Implementing counting sort.
def counting_sort(arr):
    max_val = max(arr) + 1
    count = [0] * max_val
    for num in arr:
        count[num] += 1
    output = []
    for i, freq in enumerate(count):
        output.extend([i] * freq)
    return output

# 97. Print all prime numbers in a given range.
def primes_in_range(start, end):
    primes = []
    for num in range(start, end + 1):
        if num > 1:
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    break
            else:
                primes.append(num)
    return primes

# 98. Implementing radix sort.
def radix_sort(arr):
    max_val = max(arr)
    exp = 1
    while max_val // exp > 0:
        counting_sort_exp(arr, exp)
        exp *= 10
    return arr

# 99. Swap two numbers without using a third variable.
def swap_numbers(a, b):
    a, b = b, a
    return a, b

# 100. Function to calculate the power of a number using iterative method.
def power_iterative(base, exponent):
    result = 1
    while exponent > 0:
        result *= base
        exponent -= 1
    return result

# 101. Convert decimal to binary, octal, and hexadecimal.
def convert_bases(n):
    return bin(n), oct(n), hex(n)

# 102. Check if a character is a vowel or consonant.
def is_vowel(char):
    return char.lower() in 'aeiou'

# 103. Sum the digits of an integer.
def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))

# 104. Function to compute the power of a number using **.
def power_using_operator(base, exponent):
    return base ** exponent

# 105. Convert a string to title case.
def to_title_case(s):
    return s.title()

# 106. Implementing shell sort.
def shell_sort(arr):
    gap = len(arr) // 2
    while gap > 0:
        for i in range(gap, len(arr)):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr

# 107. Find the HCF (highest common factor) of two numbers.
def hcf(a, b):
    while b:
        a, b = b, a % b
    return a

# 108. Find the LCM (lowest common multiple) of two numbers.
def lcm(a, b):
    return abs(a * b) // hcf(a, b)

# 109. Find the ASCII value of a character.
def ascii_value(char):
    return ord(char)

# 110. Find the number of words that start with a vowel in a sentence.
def words_starting_with_vowel(sentence):
    return sum(1 for word in sentence.split() if word[0].lower() in 'aeiou')

# 111. Check if a given year is a leap year.
def is_leap_year(year):
    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)

# 112. Implementing binary search.
def binary_search(arr, x):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            low = mid + 1
        else:
            high = mid - 1
    return -1

# 113. Count the frequency of a word in a sentence.
def word_frequency(sentence, word):
    return sentence.lower().split().count(word.lower())

# 114. Find all the divisors of a given number.
def divisors(n):
    return [i for i in range(1, n + 1) if n % i == 0]

# 115. Function to convert kilometers to miles.
def km_to_miles(km):
    return km * 0.621371

# 116. Function to convert pounds to kilograms.
def pounds_to_kg(pounds):
    return pounds * 0.453592

# 117. Function to calculate the area of a trapezoid.
def area_of_trapezoid(a, b, height):
    return 0.5 * (a + b) * height

# 118. Implementing cocktail shaker sort.
def cocktail_shaker_sort(arr):
    swapped = True
    start = 0
    end = len(arr) - 1
    while swapped:
        swapped = False
        for i in range(start, end):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True
        if not swapped:
            break
        swapped = False
        end -= 1
        for i in range(end - 1, start - 1, -1):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                swapped = True
        start += 1
    return arr

# 119. Function to calculate the perimeter of a rectangle.
def perimeter_of_rectangle(length, width):
    return 2 * (length + width)

# 120. Implementing bucket sort.
def bucket_sort(arr):
    largest = max(arr)
    length = len(arr)
    size = largest / length
    buckets = [[] for _ in range(length)]
    for i in range(length):
        j = int(arr[i] / size)
        if j != length:
            buckets[j].append(arr[i])
        else:
            buckets[length - 1].append(arr[i])
    for i in range(length):
        buckets[i] = sorted(buckets[i])
    result = []
    for i in range(length):
        result = result + buckets[i]
    return result

# 121. Find the sum of elements in an array.
def sum_of_array(arr):
    return sum(arr)

# 122. Implementing pancake sort.
def pancake_sort(arr):
    for curr_size in range(len(arr), 1, -1):
        mi = arr.index(max(arr[:curr_size]))
        arr = arr[:mi + 1][::-1] + arr[mi + 1:]
        arr = arr[:curr_size][::-1] + arr[curr_size:]
    return arr

# 123. Reverse a given number using mathematical manipulation.
def reverse_number(n):
    reversed_num = 0
    while n > 0:
        reversed_num = reversed_num * 10 + n % 10
        n //= 10
    return reversed_num

# 124. Calculate the number of trailing zeroes in a factorial.
def trailing_zeroes_in_factorial(n):
    count = 0
    i = 5
    while n // i > 0:
        count += n // i
        i *= 5
    return count

# 125. Function to calculate the slope of a line given two points.
def slope_of_line(x1, y1, x2, y2):
    return (y2 - y1) / (x2 - x1) if x1 != x2 else 'Undefined'

# 143. Implementing tree sort.
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def insert(root, value):
    if root is None:
        return TreeNode(value)
    if value < root.value:
        root.left = insert(root.left, value)
    else:
        root.right = insert(root.right, value)
    return root

def inorder_traversal(root, result=[]):
    if root:
        inorder_traversal(root.left, result)
        result.append(root.value)
        inorder_traversal(root.right, result)
    return result

def tree_sort(arr):
    root = None
    for value in arr:
        root = insert(root, value)
    return inorder_traversal(root)

# 144. Find the determinant of a matrix.
import numpy as np
def determinant(matrix):
    return round(np.linalg.det(np.array(matrix)), 2)

# 145. Count the number of unique words in a sentence.
def unique_word_count(sentence):
    return len(set(sentence.lower().split()))

# 146. Sort a list of dictionaries by a given key.
def sort_dicts(dicts, key):
    return sorted(dicts, key=lambda x: x[key])

# 147. Find the standard deviation of a list of numbers.
import statistics
def standard_deviation(numbers):
    return statistics.stdev(numbers)

# 148. Convert a string representation of a list into an actual list.
def str_to_list(s):
    return eval(s)

# 149. Check if a string contains only digits.
def contains_only_digits(s):
    return s.isdigit()

# 150. Split a string based on a delimiter without using split().
def custom_split(s, delimiter):
    result, temp = [], ''
    for char in s:
        if char == delimiter:
            result.append(temp)
            temp = ''
        else:
            temp += char
    result.append(temp)
    return result

# 151. Convert a list of characters into a string.
def list_to_string(lst):
    return ''.join(lst)

# 152. Implementing balanced parentheses check.
def balanced_parentheses(s):
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack

# 153. Find the sum of digits of a given number using recursion.
def sum_of_digits_recursive(n):
    return n if n < 10 else n % 10 + sum_of_digits_recursive(n // 10)

# 154. Implementing queue using two stacks.
class QueueUsingStacks:
    def __init__(self):
        self.stack1 = []
        self.stack2 = []

    def enqueue(self, item):
        self.stack1.append(item)

    def dequeue(self):
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2.pop() if self.stack2 else 'Queue is empty'

# 155. Calculate compound interest.
def compound_interest(principal, rate, time, n=1):
    return principal * ((1 + rate / (100 * n)) ** (n * time))

# 156. Find the sum of an arithmetic progression.
def sum_of_arithmetic(a, d, n):
    return n * (2 * a + (n - 1) * d) // 2

# 157. Implement stack using queues.
from queue import Queue
class StackUsingQueues:
    def __init__(self):
        self.q1 = Queue()
        self.q2 = Queue()

    def push(self, item):
        self.q2.put(item)
        while not self.q1.empty():
            self.q2.put(self.q1.get())
        self.q1, self.q2 = self.q2, self.q1

    def pop(self):
        return self.q1.get() if not self.q1.empty() else 'Stack is empty'

# 158. Implement a function to find missing numbers in an array.
def find_missing_numbers(arr):
    return sorted(set(range(min(arr), max(arr) + 1)) - set(arr))

# 159. Implementing a circular queue.
class CircularQueue:
    def __init__(self, size):
        self.queue = [None] * size
        self.size = size
        self.front = self.rear = -1

    def enqueue(self, item):
        if (self.rear + 1) % self.size == self.front:
            return 'Queue is full'
        elif self.front == -1:
            self.front = self.rear = 0
        else:
            self.rear = (self.rear + 1) % self.size
        self.queue[self.rear] = item

    def dequeue(self):
        if self.front == -1:
            return 'Queue is empty'
        elif self.front == self.rear:
            item = self.queue[self.front]
            self.front = self.rear = -1
        else:
            item = self.queue[self.front]
            self.front = (self.front + 1) % self.size
        return item

# 160. Calculate the median of a list of numbers.
def median_of_list(lst):
    lst.sort()
    n = len(lst)
    if n % 2 == 1:
        return lst[n // 2]
    else:
        return (lst[n // 2 - 1] + lst[n // 2]) / 2

# 161. Find the maximum and minimum numbers in a list without using built-in functions.
def max_min(lst):
    max_val = min_val = lst[0]
    for num in lst[1:]:
        if num > max_val:
            max_val = num
        elif num < min_val:
            min_val = num
    return max_val, min_val

# 162. Find the square root of a number without using math.sqrt.
def square_root(n):
    x = n
    y = 1
    e = 0.000001
    while x - y > e:
        x = (x + y) / 2
        y = n / x
    return x

# 163. Function to merge two sorted arrays.
def merge_sorted_arrays(arr1, arr2):
    merged = []
    i = j = 0
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            merged.append(arr1[i])
            i += 1
        else:
            merged.append(arr2[j])
            j += 1
    merged.extend(arr1[i:])
    merged.extend(arr2[j:])
    return merged

# 164. Calculate the angle between the hour and minute hand of a clock.
def clock_angle(hour, minute):
    if hour < 0 or minute < 0 or hour > 12 or minute > 60:
        return 'Invalid input'
    if hour == 12:
        hour = 0
    if minute == 60:
        minute = 0
    hour_angle = 0.5 * (hour * 60 + minute)
    minute_angle = 6 * minute
    angle = abs(hour_angle - minute_angle)
    return min(360 - angle, angle)

# 165. Count the number of leaf nodes in a binary tree.
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def count_leaf_nodes(root):
    if not root:
        return 0
    if not root.left and not root.right:
        return 1
    return count_leaf_nodes(root.left) + count_leaf_nodes(root.right)

# 166. Find the second largest number in a list.
def second_largest(lst):
    first = second = float('-inf')
    for num in lst:
        if num > first:
            second = first
            first = num
        elif num > second and num != first:
            second = num
    return second

# 167. Convert Roman numerals to integers.
def roman_to_integer(roman):
    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev_value = 0
    for char in roman[::-1]:
        value = roman_dict[char]
        if value < prev_value:
            total -= value
        else:
            total += value
        prev_value = value
    return total

# 168. Find the longest palindrome in a given string.
def longest_palindromic_substring(s):
    def expand_around_center(left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return s[left + 1:right]
    longest = ''
    for i in range(len(s)):
        odd_palindrome = expand_around_center(i, i)
        even_palindrome = expand_around_center(i, i + 1)
        longest = max(longest, odd_palindrome, even_palindrome, key=len)
    return longest

# 169. Find the maximum sum of a contiguous subarray (Kadane's Algorithm).
def max_subarray_sum(arr):
    max_current = max_global = arr[0]
    for i in range(1, len(arr)):
        max_current = max(arr[i], max_current + arr[i])
        if max_current > max_global:
            max_global = max_current
    return max_global

# 170. Generate all permutations of a given list.
from itertools import permutations
def all_permutations(lst):
    return list(permutations(lst))

# 171. Find the sum of all elements in a nested list.
def sum_nested_list(lst):
    total = 0
    for element in lst:
        if isinstance(element, list):
            total += sum_nested_list(element)
        else:
            total += element
    return total

# 172. Convert a number from one base to another.
def convert_base(num, from_base, to_base):
    decimal = int(str(num), from_base)
    return format(decimal, f'{to_base}')

# 173. Find the longest common subsequence between two strings.
def longest_common_subsequence(X, Y):
    m, n = len(X), len(Y)
    L = [[0] * (n + 1) for i in range(m + 1)]
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0 or j == 0:
                L[i][j] = 0
            elif X[i - 1] == Y[j - 1]:
                L[i][j] = L[i - 1][j - 1] + 1
            else:
                L[i][j] = max(L[i - 1][j], L[i][j - 1])
    return L[m][n]

# 174. Implementing linked list in Python.
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node

    def print_list(self):
        curr = self.head
        while curr:
            print(curr.data)
            curr = curr.next

